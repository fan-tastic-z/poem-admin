name: Integration Tests

on:
  push:
    branches:
      - main
      - develop
    paths:
      - "src/**"
      - "tests/**"
      - "migrations/**"
      - "Cargo.toml"
      - "Cargo.lock"
  pull_request:
    branches:
      - main
      - develop
    paths:
      - "src/**"
      - "tests/**"
      - "migrations/**"
      - "Cargo.toml"
      - "Cargo.lock"

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        rust: [stable]

    services:
      # PostgreSQL service for fallback testing (optional)
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Install nextest
        uses: taiki-e/install-action@nextest

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true
          key: integration-tests

      - name: Install sqlx-cli for migrations
        run: cargo install sqlx-cli --no-default-features --features postgres

      - name: Check Docker availability
        run: |
          docker --version
          docker info

      - name: Pull PostgreSQL Docker image
        run: docker pull postgres:15

      - name: Run code formatting check
        run: cargo fmt --all -- --check

      - name: Run Clippy lints
        run: cargo clippy --all-targets --tests -- -D warnings

      - name: Build project
        run: cargo build --tests

      - name: Run unit tests
        run: cargo nextest run --lib --bins

      - name: Run business logic integration tests
        run: cargo nextest run --test integration_tests
        env:
          RUST_LOG: info
          # TestContainers configuration
          TESTCONTAINERS_RYUK_DISABLED: true
          TESTCONTAINERS_WAIT_TIMEOUT: 60

      - name: Run HTTP API integration tests
        run: cargo nextest run --test api_integration_tests
        env:
          RUST_LOG: info
          # TestContainers configuration
          TESTCONTAINERS_RYUK_DISABLED: true
          TESTCONTAINERS_WAIT_TIMEOUT: 60

      - name: Run all integration tests together
        run: cargo nextest run --tests
        env:
          RUST_LOG: warn
          TESTCONTAINERS_RYUK_DISABLED: true
          TESTCONTAINERS_WAIT_TIMEOUT: 60

      - name: Generate test report
        if: always()
        run: |
          echo "## Integration Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Business Logic | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| HTTP API | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Combined | ✅ Passed |" >> $GITHUB_STEP_SUMMARY

      - name: Upload test artifacts (if any failures)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: |
            target/nextest/**
            logs/**
          retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: integration-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        uses: taiki-e/install-action@cargo-audit

      - name: Run security audit
        run: cargo audit

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install criterion
        run: cargo install cargo-criterion

      - name: Check Docker availability
        run: docker --version

      - name: Run performance benchmarks (if available)
        run: |
          # 如果有benchmark，运行它们
          if [ -d "benches" ]; then
            echo "Running performance benchmarks..."
            cargo criterion --message-format=json > benchmark-results.json || true
          else
            echo "No benchmarks found, skipping performance check"
          fi

      - name: Upload benchmark results
        if: success() && hashFiles('benchmark-results.json') != ''
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark-results.json
          retention-days: 30
